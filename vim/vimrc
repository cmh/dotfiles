" Pathogen - needed before other files
" {	
	call pathogen#infect()
	call pathogen#helptags()
" }

" turn off compatibility with the old vi
set nocompatible

" Tab/Indentation
" {
	set tabstop=4      "An indentation level every four columns"
	set softtabstop=4  "Vim treats tab as 4 spaces, but respects hard tabs"
	set expandtab      "Convert all tabs typed into spaces"
	set smarttab
	set shiftwidth=4   "Indent/outdent by four columns"
	set shiftround     "Always indent/outdent to the nearest tabstop"
	set autoindent     "auto-indenting for programming languages
	set formatoptions=rq "Automatically insert comment leader on return, and let gp format comments
	set ignorecase
	set infercase
	set smartcase
" }

" General
" {
	"set autochdir "Having this set hampers the utility of CommandT
	set backspace=indent,eol,start
	set clipboard+=unnamed "share windows clipboard	
	set fileformats=unix,dos,mac "support all 3, in this order
	set noerrorbells
	set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png,*.hi
	set wildmode=longest,list,full
	set wildmenu " turn on command line completion wild stlye
" }

filetype plugin indent on "load filetype plugins/indent settings
syntax on          "turn syntax highlighting on by default


" automatically show matching brackets. works like it does in bbedit.
" {
	set showmatch
	set showcmd
" }

let mapleader = ","
set background=dark " konsole doesn't work this our correctly
set t_Co=256 " assume we are in konsole (or any emulator with 256 support)
colorscheme jellybeans

"colorscheme sorcerer "TODO: wrap this shit in some os/bg/fg specific settings
set tags=tags;/
" Remember where you were the last time you edited the file, and returns to the same position.
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif


" UI Options
" {
	if has('cmdline_info')
		set ruler "turn the ruler on
		set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
		set showcmd "show partial commands in the status line
	endif

	if has('statusline')
		set laststatus=1 
		set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
	endif
" }

" Custom commands
" {
	map <leader>p :Project<cr>

	map <leader>ve :e ~/.vimrc<cr> 
	
    map <leader>todo :e ~/TODO<cr>

    map <leader>ll :call g:ClangUpdateQuickFix()<CR>

	" ,y to open Yankring
	map <leader>y :YRShow<CR>

	" ,t to open taglist
	nmap <leader>t :TlistToggle<CR>

	" ,d to open nerd tree
	map <leader>d <ESC>:NERDTreeToggle<CR>

    let g:jedi#get_definition_command = "<leader>gd"

	" ,f to open CtrlP
	map <leader>f <ESC>:CtrlP<CR>

	set pastetoggle=<F12> "Turn of indentation when pasting multiple lines

	cmap <leader>sudow w !sudo tee %<CR><CR> 
	
	" Make Arrow Keys Useful Again 
	" {
		map <down> <ESC>:bn<RETURN>
		"map <left> <ESC>;NERDTreeToggle<RETURN>
		"map <right> <ESC>;Tlist<RETURN>
		map <up> <ESC>:bp<RETURN>
	" }
	
	" Emacs like bindings for the command line
	" {
		cnoremap <C-A>		<Home>
		cnoremap <C-E>		<End>
		cnoremap <C-K>		<C-U>
		cnoremap <C-P>		<Up>
		cnoremap <C-N>		<Down>
	" }
	
	" Smart movement between windows
	" {
		map <C-j> <C-W>j
		map <C-k> <C-W>k
		map <C-h> <C-W>h
		map <C-l> <C-W>l	
	" }
	
" }


" Backups
" {
	set backup
	silent !mkdir $HOME/.vim/backups > /dev/null 2>&1
	set backupdir=$HOME/.vim/backups " where to put backup file
	silent !mkdir $HOME/.vim/temp > /dev/null 2>&1
	set directory=$HOME/.vim/temp " directory is the directory for temp file
	silent !mkdir $HOME/.vim/undodir > /dev/null 2>&1
	set makeef=error.err " When using make, where should it dump the file
" }
" Undo File
" {
    set undodir=$HOME/.vim/undodir
    set undofile
    set undolevels=1000
    set undoreload=10000
" }

" """""""""""""""""""""""
" Plugin specific options
" """""""""""""""""""""""

" TagList Settings 
" {
	let Tlist_Auto_Open=0 "Let the taglist open automatically
	let Tlist_Compact_Format = 1 "Show small menu
	let Tlist_Ctags_Cmd = 'ctags' "Location of ctags
	let Tlist_Exist_OnlyWindow = 1 "If you are the last, kill yourself
	let Tlist_Sort_Type = 'name' "Order by
" }

" SnipMate Settings
" {
	"Reload snippets
	nnoremap ,smr &lt;esc>:exec ReloadAllSnippets()&lt;cr> 
" }

" Python-mode settings
" {
    let g:pymode_lint = 1
    let g:pymode_folding = 0
    let g:pymode_lint_checker = "pyflakes,pymetrics"
    let g:pymode_lint_ignore = "E501, E302"
    let g:pymode_rope_vim_completion=1
    let g:pymode_rope_extended_complete=1
" }
" Supertab settings 
" {
    let g:SuperTabDefaultCompletionType = "context"
    let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
    let g:SuperTabLongestEnhanced = 1
    
" }
" { Syntastic
"
    let g:syntastic_cpp_compiler_options = '-std=c++0x'
    let g:syntastic_mode_map =  { 'mode' : 'active',
                                \ 'active_filetypes' : [],
                                \ 'passive_filetypes' : ['cpp', 'c'] }
" }
" { NeoComplCache
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_auto_select = 0
    let g:neocomplcache_enable_fuzzy_completion = 1
    let g:neocomplcache_force_overwrite_completefunc = 1
    let g:neocomplcache_snippets_disable_runtime_snippets = 1
    let g:neocomplcache_plugin_disable = { 'snippets_complete':1 }
    let g:neocomplcache_enable_prefetch = 1
    let g:neocomplcache_fuzzy_completion_start_length = 2
    if !exists('g:neocomplcache_force_omni_patterns')
          let g:neocomplcache_force_omni_patterns = {}
    endif
    let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->:digit:\)'
    let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|:digit:->\)\|\h\w*::'
    set completeopt=longest,menu
    imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"
    " au BufEnter *.cpp,*.c,*.h,*.hpp let g:neocomplcache_force_omni_patterns = 1
" }
" { Clang complete
    let g:clang_use_library = 1
    let g:clang_library_path = '/usr/local/lib'
    let g:clang_user_options = '-std=c++11'
    let g:clang_auto_select = 0
    let g:clang_complete_auto = 1
    let g:clang_complete_copen = 1
    let g:clang_complete_open = 1
    let g:clang_auto_user_options=''
    let g:clang_memory_percent=70
    let g:clang_snippets_engine='ultisnips'
" }

"""""""""""""""""""""""""""
" Language specific options
"""""""""""""""""""""""""""

" C/C++
" {
    map <F5> :make <bar> copen <CR>
    au BufEnter *.cpp,*.c,*.h,*.hpp map <leader>r :noautocmd :execute "vimgrep /" . expand("<cword>") ."/j **/*.{c,h,cpp,hpp}" <Bar> cw <CR>
" }

" Python
" {
	"Map compilation to <F7>
	au FileType python vmap <F7> :call Python_Eval_VSplit()<cr>  
	au BufEnter *.py set expandtab
" }

" Scons
" {
    au BufEnter SConstruct,SConscript set syntax=scons
" }

" Haskell { --Dependent on haskmode (vim)
" {
	au BufEnter *.hs,*.lhs compiler ghc
	autocmd FileType haskell map <buffer> <leader>c :w!<cr>:!cabal install<CR>

	autocmd FileType haskell map <buffer> <leader><space> :GhciFile<CR>
	autocmd FileType haskell map <buffer> <leader>r :GhciReload<CR>
	autocmd FileType haskell map <buffer> <leader>l :GhciRange<CR>
	autocmd FileType haskell vmap <buffer> <leader>l :GhciRange<CR>

    autocmd BufNewFile,BufRead *.hs map <buffer> <leader>h :Hoogle 
    autocmd BufNewFile,BufRead *.hs map <buffer> <leader>hc :HoogleClose<CR>
    autocmd BufNewFile,BufRead *.hs map <buffer> <leader>hl :HoogleLine<CR>
	let g:haddock_browser="x-www-browser"
" }

" Verilog {
    au BufEnter *.v,*.sv set shiftwidth=3
    au BufEnter *.v,*.sv set softtabstop=3
    au BufEnter *.v set syntax=verilog
    au BufEnter *.sv set syntax=sv
" }

""""""""""""""""""""""""""""
" Omnicomplete functions
""""""""""""""""""""""""""""

autocmd FileType css set omnifunc=csscomplete#CompleteCSS

""""""""""""""""""""""""""""
" Swap Words
""""""""""""""""""""""""""""
:nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
